#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const path_1 = require("path");
const vuepress_shared_1 = require("@mr-hope/vuepress-shared");
const cac_1 = require("cac");
const inquirer_1 = require("inquirer");
const execa = require("execa");
const copy_1 = require("./copy");
const checkVersion_1 = require("./checkVersion");
const hasYarn_1 = require("./hasYarn");
const i18n_1 = require("./i18n");
const registry_1 = require("./registry");
const cli = (0, cac_1.cac)("vuepress-theme-hope");
const bin = (0, hasYarn_1.detectYarn)() ? "yarn" : "npm";
cli
    .command("[dir]", "Generate a new vuepress-theme-hope project")
    .action(async (dir) => {
    if (!dir)
        return cli.outputHelp();
    const { lang, message } = await (0, i18n_1.getLanguage)();
    const targetFolder = (0, path_1.resolve)(process.cwd(), dir);
    const packageJsonPath = (0, path_1.resolve)(process.cwd(), "package.json");
    const scripts = {
        "docs:build": `vuepress build ${dir}`,
        "docs:clean-dev": `vuepress dev ${dir} --no-cache`,
        "docs:dev": `vuepress dev ${dir}`,
        "docs:eject-theme": `vuepress eject-hope ${dir}`,
    };
    console.log(message.getVersion);
    const vuepressVersion = await (0, checkVersion_1.checkForLatestVersion)("vuepress");
    const themeVersion = await (0, checkVersion_1.checkForLatestVersion)("vuepress-theme-hope");
    const devDependencies = {
        vuepress: `^${vuepressVersion}`,
        "vuepress-theme-hope": `^${themeVersion}`,
    };
    if (!(0, fs_1.existsSync)(targetFolder))
        (0, fs_1.mkdirSync)(targetFolder);
    if ((0, fs_1.existsSync)(packageJsonPath)) {
        console.log(message.updatePackage);
        // eslint-disable-next-line
        const packageContent = JSON.parse((0, fs_1.readFileSync)(packageJsonPath, { encoding: "utf-8" }));
        (0, vuepress_shared_1.deepAssign)(packageContent, { scripts, devDependencies });
        (0, fs_1.writeFileSync)(packageJsonPath, `${JSON.stringify(packageContent, null, 2)}\n`, { encoding: "utf-8" });
    }
    else {
        console.log(message.createPackage);
        const result = await (0, inquirer_1.prompt)([
            {
                name: "name",
                type: "input",
                message: message.nameMessage,
                default: "vuepress-theme-hope-project",
                validate: (input) => /^(?:@[a-z0-9-*~][a-z0-9-*._~]*\/)?[a-z0-9-~][a-z0-9-._~]*$/u.exec(input)
                    ? true
                    : message.nameError,
            },
            {
                name: "version",
                type: "input",
                message: message.versionMessage,
                default: "1.0.0",
                validate: (input) => /^[0-9]+\.[0-9]+\.(?:[0=9]+|[0-9]+-[a-z]+\.[0-9])$/u.exec(input)
                    ? true
                    : message.versionError,
            },
            {
                name: "description",
                type: "input",
                message: message.descriptionMessage,
                default: "A project of vuepress-theme-hope",
            },
            {
                name: "license",
                type: "input",
                message: message.licenseMessage,
                default: "MIT",
            },
        ]);
        const packageContent = Object.assign(Object.assign({}, result), { scripts, devDependencies });
        (0, fs_1.writeFileSync)(packageJsonPath, `${JSON.stringify(packageContent, null, 2)}\n`, { encoding: "utf-8" });
    }
    console.log(message.template);
    (0, copy_1.copy)((0, path_1.resolve)(__dirname, "../template"), (0, path_1.resolve)(process.cwd(), dir));
    console.log(message.install);
    console.warn(message.wait);
    const registry = await (0, registry_1.getRegistry)(lang, bin);
    execa.sync(bin, ["install", "--registry", registry], {
        stdout: "inherit",
    });
    console.log(message.success);
    const { choise } = await (0, inquirer_1.prompt)([
        {
            name: "choise",
            type: "list",
            message: message.devServerAsk,
            choices: ["Yes", "No"],
        },
    ]);
    if (choise === "Yes") {
        console.log(message.devServer);
        console.log(message.wait);
        await execa(bin, ["run", "docs:dev"], {
            stdout: "inherit",
        });
    }
    else
        console.log(message.hint);
});
cli.help(() => [
    {
        title: "yarn create vuepress-theme-hope <dir> / npm init vuepress-theme-hope <dir>",
        body: "Create a vuepress-theme-hope template in <dir>",
    },
]);
cli.parse();
//# sourceMappingURL=index.js.map